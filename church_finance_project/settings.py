"""
Django settings for church_finance_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import sys
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-zdk_gm_9vek_n8$o-68f*yyyn#22%1l$8g*1j_)$gf50de3)u%")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS configuration
ALLOWED_HOSTS = [
    'church-books-production.up.railway.app',
    'churchbooksmanagement.com', 
    'www.churchbooksmanagement.com',
    'healthcheck.railway.app',  # Railway health check domain
    '*.up.railway.app',  # Railway subdomains
    '.railway.app',  # All Railway domains
    '.railway.internal',  # Railway internal domains
    '127.0.0.1',
    'localhost'
] if not DEBUG else ['*']  # Allow all hosts only in development

# Add Railway-provided hostnames from environment variables
railway_public_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
if railway_public_domain:
    ALLOWED_HOSTS.append(railway_public_domain)

railway_private_domain = os.environ.get('RAILWAY_PRIVATE_DOMAIN')
if railway_private_domain:
    ALLOWED_HOSTS.append(railway_private_domain)

# Add additional allowed hosts from environment variable
additional_hosts = os.environ.get('ALLOWED_HOSTS', '')
if additional_hosts:
    ALLOWED_HOSTS.extend([host.strip() for host in additional_hosts.split(',') if host.strip()])
# Session Settings for Production
SESSION_COOKIE_SECURE = not DEBUG  # True in production with HTTPS
SESSION_COOKIE_SAMESITE = 'Lax'

# Session security
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Additional security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Enable SSL redirect in production (Railway handles this)
    SECURE_SSL_REDIRECT = False  # Railway handles SSL termination
else:
    # Development settings
    SECURE_SSL_REDIRECT = False


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'church_finances'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # CSRF Middleware removed for simplified security model
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "church_finance_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # <--- This line is absolutely crucial
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "church_finance_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite for local development
#DATABASES = {
 #   'default': {
  #      'ENGINE': 'django.db.backends.sqlite3',
   #     'NAME': BASE_DIR / 'db.sqlite3',
    #}
#}

# Database configuration
RUNNING_COLLECTSTATIC = 'collectstatic' in sys.argv
RUNNING_MIGRATIONS = 'migrate' in sys.argv
BUILD_TIME_COLLECTSTATIC = os.getenv('DJANGO_COLLECTSTATIC_BUILD') == '1'

# If we're collecting static during build, don't require DB env: use a safe SQLite fallback
if RUNNING_COLLECTSTATIC or RUNNING_MIGRATIONS or BUILD_TIME_COLLECTSTATIC:
    action = 'collectstatic' if RUNNING_COLLECTSTATIC else 'migrate' if RUNNING_MIGRATIONS else 'build-time-collectstatic'
    print(f"Detected Django management command ({action}). Using SQLite fallback to allow operation without external DB.")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    # Check for Railway DATABASE_URL first, then construct from individual variables, then fall back to local
    database_url = os.getenv('DATABASE_URL')
    print(f"DATABASE_URL found: {bool(database_url)}")

    # If no DATABASE_URL but we have individual Railway DB variables, construct it
    if not database_url:
        db_host = os.getenv('DB_HOST') or os.getenv('POSTGRES_HOST') or os.getenv('PGHOST')
        db_port = os.getenv('DB_PORT') or os.getenv('POSTGRES_PORT') or os.getenv('PGPORT')
        db_name = os.getenv('DB_NAME') or os.getenv('POSTGRES_DB') or os.getenv('PGDATABASE')
        db_user = os.getenv('DB_USER') or os.getenv('POSTGRES_USER') or os.getenv('PGUSER')
        db_password = os.getenv('DB_PASSWORD') or os.getenv('POSTGRES_PASSWORD') or os.getenv('PGPASSWORD')

        if db_host and db_name and db_user and db_password:
            # Construct DATABASE_URL from individual variables
            database_url = f"postgres://{db_user}:{db_password}@{db_host}:{db_port or '5432'}/{db_name}?sslmode=disable"
            print("Constructed DATABASE_URL from individual variables")
            print(f"DB Host: {db_host}, DB Name: {db_name}")

    if database_url:
        # Production database via DATABASE_URL
        try:
            DATABASES = {
                'default': dj_database_url.parse(database_url)
            }
            print("Using DATABASE_URL for database connection")
            print(f"Database: {DATABASES['default']['NAME']} @ {DATABASES['default']['HOST']}")
        except Exception as e:
            print(f"Error parsing DATABASE_URL: {e}")
            print(f"DATABASE_URL value: {database_url}")
            raise
    else:
        # Local development fallback
        print("No DATABASE_URL found. Checking for local PostgreSQL environment variables...")

        db_name = os.getenv('DB_NAME') or os.getenv('POSTGRES_DB')
        db_host = os.getenv('DB_HOST') or os.getenv('POSTGRES_HOST')
        print(f"Local DB_NAME: {db_name}, DB_HOST: {db_host}")

        if not db_name and not db_host:
            # No database configuration found
            print("ERROR: No database configuration found!")
            print("Missing DATABASE_URL and individual DB_* environment variables")
            print("Available environment variables:")
            for key in os.environ:
                if 'DB' in key or 'POSTGRES' in key or 'PG' in key or 'DATABASE' in key:
                    print(f"  {key}: {os.environ[key]}")
            # In non-collectstatic paths we still need a DB; default to SQLite rather than crash in some envs
            print("Falling back to SQLite for safety. Set DATABASE_URL or DB_* env vars in production.")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
        else:
            try:
                DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.postgresql',
                        'NAME': os.getenv('DB_NAME') or os.getenv('POSTGRES_DB', 'church_books'),
                        'USER': os.getenv('DB_USER') or os.getenv('POSTGRES_USER', 'postgres'),
                        'PASSWORD': os.getenv('DB_PASSWORD') or os.getenv('POSTGRES_PASSWORD', ''),
                        'HOST': os.getenv('DB_HOST') or os.getenv('POSTGRES_HOST', 'localhost'),
                        'PORT': os.getenv('DB_PORT') or os.getenv('POSTGRES_PORT', '5432'),
                        'OPTIONS': {
                            'sslmode': 'disable',
                        }
                    }
                }
                print(f"Using local PostgreSQL: {DATABASES['default']['NAME']} @ {DATABASES['default']['HOST']}")
            except Exception as e:
                print(f"Error configuring local database: {e}")
                raise

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # For development
# For production, use the following settings with your email provider:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'  # Or your email provider's SMTP server
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'your-app-specific-password'

# PayPal Configuration
PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID', 'your_paypal_client_id')
PAYPAL_CLIENT_SECRET = os.environ.get('PAYPAL_CLIENT_SECRET', 'your_paypal_client_secret')
PAYPAL_MODE = os.environ.get('PAYPAL_MODE', 'sandbox')  # 'sandbox' or 'live'

# PayPal URLs - Use your actual domain
PAYPAL_BASE_URL = os.environ.get('PAYPAL_BASE_URL', 'http://127.0.0.1:8000')

# PayPal Subscription Plan IDs (These need to be created in PayPal dashboard)
PAYPAL_STANDARD_PLAN_ID = os.environ.get('PAYPAL_STANDARD_PLAN_ID', 'P-XXXXXXXXXXXXXXXXXXXX')
PAYPAL_PREMIUM_PLAN_ID = os.environ.get('PAYPAL_PREMIUM_PLAN_ID', 'P-XXXXXXXXXXXXXXXXXXXX')

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'church_finances': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# Authentication URLs
LOGIN_URL = '/finances/login/'
LOGIN_REDIRECT_URL = '/finances/dashboard/'
LOGOUT_REDIRECT_URL = '/'
