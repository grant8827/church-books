"""
Django settings for church_finance_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
## from base_settings import *
from pathlib import Path
import os
import sys
import dj_database_url
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', "django-insecure-zdk_gm_9vek_n8$o-68f*yyyn#22%1l$8g*1j_)$gf50de3)u%")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS configuration
ALLOWED_HOSTS = [
    'church-books-production-e217.up.railway.app',
    'churchbooksmanagement.com',
    'www.churchbooksmanagement.com',
    'healthcheck.railway.app',
    '127.0.0.1',
    'localhost',
] if not DEBUG else ['*']  # Allow all hosts only in development

# Add Railway-provided hostnames from environment variables
railway_public_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
if railway_public_domain:
    ALLOWED_HOSTS.append(railway_public_domain)

railway_private_domain = os.environ.get('RAILWAY_PRIVATE_DOMAIN')
if railway_private_domain:
    ALLOWED_HOSTS.append(railway_private_domain)

# Add additional allowed hosts from environment variable
additional_hosts = os.environ.get('ALLOWED_HOSTS', '')
if additional_hosts:
    ALLOWED_HOSTS.extend([host.strip() for host in additional_hosts.split(',') if host.strip()])


# CSRF Configuration
CSRF_TRUSTED_ORIGINS = []
if not DEBUG:
    # Production CSRF trusted origins - Base list (Railway and custom domain)
    base_origins = [
        'https://church-books-production-e217.up.railway.app',
        'https://churchbooksmanagement.com',
        'https://www.churchbooksmanagement.com',
    ]
    
    # Add Railway-provided domain if different
    if railway_public_domain and f'https://{railway_public_domain}' not in base_origins:
        base_origins.append(f'https://{railway_public_domain}')
    
    # Add from environment variable (but filter out invalid ones)
    csrf_origins = os.environ.get('CSRF_TRUSTED_ORIGINS', '')
    if csrf_origins:
        env_origins = [origin.strip() for origin in csrf_origins.split(',') if origin.strip()]
        # Filter out wildcards and localhost in production
        valid_env_origins = [
            origin for origin in env_origins 
            if not ('*' in origin or 'localhost' in origin or origin.startswith('http://'))
        ]
        base_origins.extend(valid_env_origins)
        print(f"Added valid CSRF origins from env: {valid_env_origins}")
        if len(env_origins) != len(valid_env_origins):
            print(f"Filtered out invalid origins: {[o for o in env_origins if o not in valid_env_origins]}")
    
    # Remove duplicates while preserving order
    CSRF_TRUSTED_ORIGINS = list(dict.fromkeys(base_origins))
    print(f"Final CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")
else:
    # Development - allow local origins
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8000',
        'http://127.0.0.1:8000',
        'http://localhost:8080',
        'http://127.0.0.1:8001',
        'http://localhost:8001',
    ]
    print(f"Development CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")


# Session Settings - will be overridden in security section below
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Additional security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Enable SSL redirect in production (Railway handles this)
    SECURE_SSL_REDIRECT = False  # Railway handles SSL termination
    
    # CSRF security
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access for debugging
    CSRF_COOKIE_SAMESITE = 'Lax'  # Changed from 'Strict' to 'Lax' for better compatibility
    CSRF_COOKIE_AGE = 31449600  # 1 year
    CSRF_USE_SESSIONS = False  # Use cookies instead of sessions for CSRF tokens
    CSRF_COOKIE_NAME = 'csrftoken'  # Explicit cookie name
    
    # Session security
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Strict'
    
    # Additional production security
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
else:
    # Development settings
    SECURE_SSL_REDIRECT = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'church_finances',
   
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "church_finance_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # <--- This line is absolutely crucial
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = "church_finance_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Database configuration
# Special case: allow SQLite only during Docker build collectstatic
BUILD_TIME_COLLECTSTATIC = os.getenv('DJANGO_COLLECTSTATIC_BUILD') == '1'
RUNNING_COLLECTSTATIC = 'collectstatic' in sys.argv

if BUILD_TIME_COLLECTSTATIC and RUNNING_COLLECTSTATIC:
    # During Docker build, use SQLite for collectstatic only
    print("Docker build: Using SQLite for collectstatic command only")
    #DATABASES = {
     #   'default': {
        #    'ENGINE': 'django.db.backends.sqlite3',
         #   'NAME': ':memory:',  # Use in-memory SQLite for speed
       # }
   # }
else:
    # All other cases: try Railway DATABASE_URL first, then POSTGRES_* variables
    database_url = os.getenv('DATABASE_URL')
    
    if database_url:
        print(f"Using Railway DATABASE_URL for PostgreSQL connection")
        DATABASES = {
            'default': dj_database_url.config(
                default=database_url,
                conn_max_age=60,
                conn_health_checks=True,
            )
        }
    else:
        # Fallback to individual POSTGRES_* variables
        pg_host = os.getenv('POSTGRES_HOST')
        pg_port = os.getenv('POSTGRES_PORT', '5432')
        pg_db = os.getenv('POSTGRES_DB')
        pg_user = os.getenv('POSTGRES_USER')
        pg_password = os.getenv('POSTGRES_PASSWORD')

        # Debug: Show what PostgreSQL variables we found
        print(f"PostgreSQL Variables Debug:")
        print(f"  POSTGRES_HOST: {'***' if pg_host else 'Not set'}")
        print(f"  POSTGRES_PORT: {pg_port}")
        print(f"  POSTGRES_DB: {'***' if pg_db else 'Not set'}")
        print(f"  POSTGRES_USER: {'***' if pg_user else 'Not set'}")
        print(f"  POSTGRES_PASSWORD: {'***' if pg_password else 'Not set'}")

        # Use PostgreSQL if credentials are available, otherwise fall back to SQLite
        if not all([pg_host, pg_port, pg_db, pg_user, pg_password]):
            missing_vars = [var for var, val in [('POSTGRES_HOST', pg_host), ('POSTGRES_PORT', pg_port), ('POSTGRES_DB', pg_db), ('POSTGRES_USER', pg_user), ('POSTGRES_PASSWORD', pg_password)] if not val]
            print(f"Using SQLite for local development/testing - Missing PostgreSQL variables: {missing_vars}")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
        else:
            print(f"Using PostgreSQL database: {pg_user}@{pg_host}:{pg_port}/{pg_db}")
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'HOST': pg_host,
                    'PORT': pg_port,
                    'NAME': pg_db,
                    'USER': pg_user,
                    'PASSWORD': pg_password,
                    'CONN_MAX_AGE': 60,
                    'OPTIONS': {
                        'options': '-c search_path=public',
                    },
                }
            }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Static files for production
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration - temporarily disable manifest for debugging
STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
if DEBUG:
    # Development: Print emails to console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    # Production: Use SMTP
    EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
    EMAIL_HOST = os.getenv('EMAIL_HOST', 'webhosting2023.is.cc')
    EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
    EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'False').lower() == 'true'
    EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'info@churchbooksmanagement.com')
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'Church Finance App <info@churchbooksmanagement.com>')
    SERVER_EMAIL = DEFAULT_FROM_EMAIL
    EMAIL_TIMEOUT = 30  # Timeout in seconds

# PayPal Configuration - REMOVED DUPLICATE (configuration moved to end of file)

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'church_finances': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

# Authentication URLs
LOGIN_URL = '/finances/login/'
LOGIN_REDIRECT_URL = '/finances/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# PayPal Configuration
PAYPAL_CLIENT_ID = os.getenv('PAYPAL_CLIENT_ID', '')
PAYPAL_CLIENT_SECRET = os.getenv('PAYPAL_CLIENT_SECRET', '')
PAYPAL_MODE = os.getenv('PAYPAL_MODE', 'sandbox')
PAYPAL_BASE_URL = os.getenv('PAYPAL_BASE_URL', 'https://churchbooksmanagement.com')
PAYPAL_STANDARD_PLAN_ID = os.getenv('PAYPAL_STANDARD_PLAN_ID', 'P-XXXXXXXXXXXXXXXXXXXX')
PAYPAL_PREMIUM_PLAN_ID = os.getenv('PAYPAL_PREMIUM_PLAN_ID', 'P-XXXXXXXXXXXXXXXXXXXX')

# Use mock PayPal service when credentials are invalid or missing
USE_MOCK_PAYPAL = os.getenv('USE_MOCK_PAYPAL', 'False').lower() in ('true', '1', 'yes')

# Security Settings for Production
# Some hosting platforms set DEBUG=False even in review/staging contexts.
# To avoid breaking local development when DEBUG=False in .env, require an explicit FORCE_SSL flag.
FORCE_SSL = os.getenv('FORCE_SSL', '0') in ('1', 'true', 'True', 'yes', 'on')
if not DEBUG and FORCE_SSL:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
else:
    # Ensure local/dev usage does not attempt HTTPS redirection
    SECURE_SSL_REDIRECT = False
